{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/components/editor/editor.component.ts","./src/app/components/editor/editor.component.html","./src/app/components/post/post.component.ts","./src/app/components/post/post.component.html","./src/app/app.module.ts","./src/app/components/blog/blog.component.html","./src/app/components/blog/blog.component.ts","./src/app/app-routing.module.ts","./src/app/blog.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Blog';\n}\n","<router-outlet></router-outlet>","import { Component, Input, OnInit } from '@angular/core';\nimport { BlogService } from 'src/app/blog.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\nexport class EditorComponent implements OnInit {\n\n  // Получаем все посты и текущий пост из сервиса\n  posts = this.blogService.getPosts();\n  currentPost = this.blogService.getCurrentPost();\n  \n  constructor(private blogService: BlogService, public router: Router) { }\n  \n  // Задаем значения title и content, чтобы они отображались правильно при открытии поста\n  @Input() title : string = this.currentPost.title;\n  @Input() content : string = this.currentPost.content;\n\n  isPostNew = false;\n  ngOnInit() {\n    if (this.currentPost.title == '' && this.currentPost.content == ''){\n      this.isPostNew = true;\n    } else {\n      this.isPostNew = false\n    }\n  }\n\n  // Если пост старый то обновляем его, если новый то добавляем его \n  save() {\n    if (this.title == '' || this.content == ''){\n      alert('Не все поля заполнены')\n      this.router.navigate(['/editor']);\n    } else {\n      if (this.isPostNew == true){\n        var post = {\n          title: this.title,\n          content: this.content\n        }\n        this.blogService.addToBlog(post);\n      } else {\n        var post = {\n          title: this.title,\n          content: this.content\n        }\n        this.blogService.updatePost(post, this.currentPost)\n      }  \n    }\n    \n  }\n\n  // Удаляем пост через сервис\n  delete() {\n    if (confirm('Вы уверены что хотите удалить пост?')) {\n      var post = {\n        title: this.currentPost.title,\n        content: this.currentPost.content\n      }\n      this.blogService.deletePost(post)\n    } else {\n      this.router.navigate(['/editor']);\n    }\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"blog\">\n        <button routerLink=\"/\" class=\"button-back\">Назад</button>\n        <div class=\"editor-header\">\n            <h1>Запись</h1>\n        </div>\n        <!-- С помощью two-way binding обновляем измененные значения title и content -->\n        <input autofocus placeholder=\"Title записи\" class=\"post-title\" type=\"text\" id=\"title\" name=\"title\" [(ngModel)]=\"title\">\n        <textarea rows=\"4\" cols=\"50\" placeholder=\"Контент записи\" class=\"post-content\" type=\"text\" id=\"content\" name=\"content\" [(ngModel)]=\"content\"></textarea>\n        <div class=\"buttons\">\n            <button class=\"delete\" (click)=\"delete()\" routerLink=\"/\">Удалить</button>\n            <button class=\"save\" (click)=\"save()\" routerLink=\"/\">Сохранить</button>\n        </div>\n    </div>    \n</div>\n\n","import { Component, Input, OnInit } from '@angular/core';\nimport { BlogService } from 'src/app/blog.service';\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.css']\n})\nexport class PostComponent implements OnInit {\n\n    // устанавливает дефолтные значения \n  @Input() title = ''\n  @Input() content = ''\n \n  open(){\n    this.blogService.openPost(this);\n  }\n\n  constructor(private blogService: BlogService) { }\n\n  ngOnInit(): void {\n  }\n\n\n}\n","\n<div class=\"blog-post\">\n    <!-- [title] и [content] получаем из .ts файла компонента родителя (blog) -->\n    <div class=\"post-title\">{{title}}</div>\n    <div class=\"post-content-box\">\n        <textarea readonly rows=\"4\" cols=\"50\">{{content}}</textarea>\n    </div>\n    <button class=\"post-button\" routerLink=\"/editor\" (click)=\"open()\">перейти</button>\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule, routingComponents } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { PostComponent } from './components/post/post.component';\n\nimport { BlogService } from './blog.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostComponent,\n    routingComponents\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule\n  ],\n  providers: [BlogService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"blog\">\n    <div class=\"header\"><h1>Блог</h1></div>\n    <div class=\"container\">\n      <div class=\"blog-posts\">\n        <!-- С помощью *ngFor проходим по массиву posts и рендерим <app-post> компонент для каждого объекта в массиве posts -->\n        <!-- Передаем компоненту параметры title, content -->\n        <app-post *ngFor=\"let post of posts\" [title]=\"post.title\" [content]=\"post.content\"></app-post>\n      </div>\n    </div>\n    <button routerLink=\"/editor\" class=\"add-button\" (click)=\"resetCurrentPost()\">+Добавить</button>\n</div>\n  ","import { Component, OnInit } from '@angular/core';\nimport { BlogService } from 'src/app/blog.service';\n\n@Component({\n  selector: 'app-blog',\n  templateUrl: './blog.component.html',\n  styleUrls: ['./blog.component.css']\n})\nexport class BlogComponent implements OnInit {\n\n  posts = this.blogService.getPosts();\n    \n  resetCurrentPost() {\n    this.blogService.resetCurrent()\n  }\n  \n  constructor(private blogService: BlogService) { }\n\n  ngOnInit(): void {\n     \n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EditorComponent } from './components/editor/editor.component';\nimport { BlogComponent } from './components/blog/blog.component';\n\nconst routes: Routes = [\n  { path: '', component: BlogComponent },\n  { path: 'editor', component: EditorComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\nexport const routingComponents = [EditorComponent, BlogComponent]","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogService {\n  // Дефолтные значения\n  posts = []\n  currentPost = {title: '', content: ''}\n\n  constructor() { }\n\n  // Добавляем пост в блог путем добавления объекта post в массив posts\n  addToBlog(post) {\n    this.posts.push(post)\n  }\n\n  // Получаем все посты\n  getPosts() {\n    return this.posts\n  }\n\n  // Получаем значения открытого поста при его открытии\n  getCurrentPost() {\n    return this.currentPost;\n  }\n\n  // Обнуляем значения текущего поста при нажатии на кнопку \"+Добавить\"\n  resetCurrent() {\n    this.currentPost.title = '';\n    this.currentPost.content = '';\n  }\n\n  // Задаем значения текущего поста при нажатии кнопки перейти\n  openPost(post) {\n    this.currentPost.title = post.title;\n    this.currentPost.content = post.content;\n  }\n  \n  // Находим нужный пост и обновляем title и content\n  updatePost(post, oldPost){\n    this.posts.map((obj) => {\n      if(JSON.stringify(obj) === JSON.stringify(oldPost)){\n        let index = this.posts.indexOf(obj)\n        this.posts[index].title = post.title\n        this.posts[index].content = post.content\n      }\n    });\n  }\n  // Находим нужный пост и удаляем его\n  deletePost(post) {\n    this.posts.map((obj) => {\n      if(JSON.stringify(obj) === JSON.stringify(post)){\n        let index = this.posts.indexOf(obj)\n        this.posts.splice(index, 1)\n      }\n    });\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}